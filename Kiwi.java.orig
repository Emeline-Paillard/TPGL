/**
 *
<<<<<<< HEAD
 * @author
 ╔╦╗┬ ┬┬┌┐ ┌─┐┬ ┬┬ ┌┬┐
  ║ ├─┤│├┴┐├─┤│ ││  │
  ╩ ┴ ┴┴└─┘┴ ┴└─┘┴─┘┴
 ╦  ┌─┐┌┐┌┌─┐┌─┐┬  ┌─┐┌┬┐
 ║  ├─┤││││  ├┤ │  │ │ │
 ╩═╝┴ ┴┘└┘└─┘└─┘┴─┘└─┘ ┴
 */


public class Kiwi implements Fruit{

    private double prix;
    private String origine;

    public Kiwi()
=======
 * @author exhme
 */
public class Kiwi implements Fruit{
    private double prix;
    private String origine;
	
    public Kiwi() 
>>>>>>> 2f04580d1f295fc7ba59073a83a38b310b6030a5
    {
        this.prix = 0.5;  //prix en euros
        this.origine="Espagne";
    }
<<<<<<< HEAD

    public Kiwi(double prix, String origine)
=======
    
    public Kiwi(double prix, String origine) 
>>>>>>> 2f04580d1f295fc7ba59073a83a38b310b6030a5
    {
	if(prix < 0)
	    this.prix = -prix;  //une solution possible pour interdire les prix negatifs
	else
	    this.prix = prix;

	if(origine.equals(""))
            this.origine = "Espagne";  //Espagne par défaut
	else
<<<<<<< HEAD
            this.origine = origine;
=======
            this.origine = origine;   
>>>>>>> 2f04580d1f295fc7ba59073a83a38b310b6030a5
    }

    public double getPrix(){
	return prix;
    }

    public void setPrix(double prix){
	this.prix=prix;
    }

    public String getOrigine(){
	return origine;
    }
<<<<<<< HEAD

=======
 
>>>>>>> 2f04580d1f295fc7ba59073a83a38b310b6030a5
    public void setOrigine(String origine){
	this.origine=origine;
    }

    @Override
    public String toString(){
        return "Kiwi de " + origine + " a " + prix + " euros";
    }

    @Override
<<<<<<< HEAD
    public boolean equals(Object o){  //predicat pour tester si 2 Kiwis sont equivalentes
        if(o != null && getClass() == o.getClass()){
            Kiwi or = (Kiwi) o;
            return (prix == or.prix && origine.equals(or.origine));
=======
    public boolean equals(Object k){  //predicat pour tester si 2 Kiwis sont equivalents
        if(k != null && getClass() == k.getClass()){
            Kiwi kw = (Kiwi) k;
            return (prix == kw.prix && origine.equals(kw.origine));
>>>>>>> 2f04580d1f295fc7ba59073a83a38b310b6030a5
        }
        return false;
    }

<<<<<<< HEAD
    public boolean isSeedless() {  //predicat indiquant qu'une Kiwi a des pepins
        return false;
=======
    public boolean isSeedless() {  //predicat indiquant qu'un Kiwi a des pepins
        return true;
>>>>>>> 2f04580d1f295fc7ba59073a83a38b310b6030a5
    }


    public static void main (String[] args){
        //Ecrire ici vos tests
<<<<<<< HEAD
    Kiwi o = new Kiwi(250, "France");
    System.out.println(o.toString());
=======
        Kiwi ConstructeurDefaut = new Kiwi();
        Kiwi ConstructeurParam1 = new Kiwi(15, "Bretagne");
        Kiwi ConstructeurParam2 = new Kiwi(10, "");
        Kiwi ConstructeurParam3 = new Kiwi(-4, "Hongrie");

        System.out.println("premier test Kiwi");
        System.out.println(ConstructeurDefaut.toString());
        System.out.println(ConstructeurParam1.toString());
        System.out.println(ConstructeurParam2.toString());
        System.out.println(ConstructeurParam3.toString());
>>>>>>> 2f04580d1f295fc7ba59073a83a38b310b6030a5
   }
}
